@page "/coldstaking-withdraw/{walletname}"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Interfaces
@using Blockcore.Base.Deployments

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject Network Network
@inject IWalletTransactionHandler WalletTransactionHandler
@inject IBroadcasterManager BroadcasterManager
@inject NodeDeployments NodeDeployments

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Cold Staking withdrawal to @walletname</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
    </div>
</div>

@{
var accountBalance = this.WalletManager.GetBalances(walletname, "coldStakingColdAddresses").Single();
var mainAccountBalance = this.WalletManager.GetBalances(walletname, "account 0").Single();

<div class="row mb-3">
    <div class="col-xl-6 col-sm-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h5>Main Balance</h5>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex align-items-center align-self-start">
                            <h3 class="text-left">@mainAccountBalance.AmountConfirmed</h3>
                            <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                        </div>
                    </div>
                </div>
                <h6 class="text-left text-muted font-weight-normal">@mainAccountBalance.AmountUnconfirmed (unconfirmed)</h6>
            </div>
        </div>
    </div>
        <div class="col-xl-6 col-sm-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h5>Cold Balance</h5>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex align-items-center align-self-start">
                            <h3 class="text-left">@accountBalance.AmountConfirmed </h3>
                            <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                        </div>
                    </div>
                </div>
                <h6 class="text-left text-muted font-weight-normal">@accountBalance.AmountUnconfirmed (unconfirmed)</h6>
            </div>
        </div>
    </div>
</div>
<div class="row ">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span style="min-width: 10em" class="input-group-text" id="basic-addon1">Address:</span>
                    </div>
                    <input @bind="Address" type="text" class="form-control" placeholder="Please enter your address" />
                    <button class="btn btn-primary btn-sm" @onclick="GenerateAddress">Get address from: @walletname</button>
                </div>

                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span style="min-width: 10em" class="input-group-text">Amount(@this.Network.CoinTicker.ToUpper()):</span>
                    </div>
                    <input @bind="Amount" type="text" class="form-control" placeholder="amount" />
                    <div class="input-group-append">
                        <button class="btn btn-secondary" @onclick="MaxAmount">Max</button>
                    </div>
                </div>

                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span style="min-width: 10em" class="input-group-text">Fee:</span>
                    </div>
                    <input @bind="Fee" type="text" class="form-control" placeholder="fee" />
                    <div class="input-group-append">
                        <span style="min-width: 10em" class="input-group-text">Optional (<abbr title="The low fee may not be enough for every transaction">default to low</abbr>)</span>
                    </div>
                </div>

                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span style="min-width: 10em" class="input-group-text">Password:</span>
                    </div>
                    <input @bind="Password" type="password" class="form-control" placeholder="Please enter your password" />
                </div>
                <div class="input-group mb-3">
                    <button class="btn btn-primary" @onclick="Withdraw">Withdraw Now</button>
                </div>
                <div class="input-group">
                    <div class="alert-warning">@Alert</div>
                </div>
            </div>
        </div>
    </div>
</div>
}
@code
{
    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    [Parameter]
    public string walletname { get; set; }

    private string Address { get; set; }

    private string Password { get; set; }

    private decimal Amount { get; set; }

    private decimal Fee { get; set; }

    public bool IsColdWalletAccount { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        this.Fee = new Money(this.Network.MinTxFee).ToDecimal(MoneyUnit.BTC);

        return Task.CompletedTask;
    }

    private void GenerateAddress()
    {
        var result = this.WalletManager.GetUnusedAddress(new Wallet.Types.WalletAccountReference(this.walletname, "account 0"));

        var segwit = this.NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.Witness);

        this.Address = segwit ? result.Bech32Address : result.Address;
    }
    public void MaxAmount()
    {
        var accountBalance = this.WalletManager.GetBalances(walletname, "coldStakingColdAddresses").Single();
        this.Amount = accountBalance.AmountConfirmed.ToDecimal(MoneyUnit.BTC) - this.Fee;
    }
    private async Task Withdraw()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.Address)) { this.Alert = "Please enter a withdrawal address"; return; }
        this.Alert = string.Empty;

        try
        {
            Transaction transaction = this.ColdStakingManager.GetColdStakingWithdrawalTransaction(
                this.WalletTransactionHandler,
                this.Address,
                this.walletname,
                this.Password,
                new Money(this.Amount, MoneyUnit.BTC),
                new Money(this.Fee, MoneyUnit.BTC));

            await this.BroadcasterManager.BroadcastTransactionAsync(transaction);

            var res = this.BroadcasterManager.GetTransaction(transaction.GetHash());

            if (res.TransactionBroadcastState == Connection.Broadcasting.TransactionBroadcastState.FailedBroadcast)
            {
                this.Alert = res.ErrorMessage;
                return;
            }

        }
        catch (Exception ex)
        {
            Alert = ex.Message;
            return;
        }
        //TODO: Add confirmation screen
        NavigationManager.NavigateTo("coldstakeview/" + walletname + "/coldStakingColdAddresses");
    }
}