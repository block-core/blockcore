@page "/"

@using Blockcore.Utilities.Extensions

@inject IFullNode FullNode
@inject NBitcoin.Network Network
@inject NBitcoin.ChainIndexer ChainIndexer
@inject Blockcore.Connection.IConnectionManager ConnectionManager
@inject Blockcore.Interfaces.IInitialBlockDownloadState InitialBlockDownloadState
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>@this.Network.CoinTicker.ToUpper() Node</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="input-group">
                <input @bind="NodeIp" type="text" class="form-control" placeholder="Node IP Address" />
                <div class="input-group-append">
                    <button class="btn btn-sm btn-primary mr-1" @onclick="Addnode">Add Node</button>
                </div>
                <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToLogs(); }">View Logs</button>
                <button class="btn btn-sm btn-danger" @onclick="() => { Shutdown(); }">Shutdown</button>
        </div>
    </div>

</div>

<div class="input-group mb-3">
    <div class="alert-warning">@Alert</div>
</div>

@{

<div class="table-responsive">
  <table class="table table-bordered">
    <tbody>
      <tr>
        <td style="max-width: 10em">Connected peers:</td>
        <td>@this.ConnectionManager.ConnectedPeers.Count()</td>
      </tr>
      <tr>
        <td style="max-width: 10em">Current tip at height:</td>
        <td>@this.ChainIndexer.Tip.Height</td>
      </tr>
      <tr>
        <td style="max-width: 10em">Current tip Hash:</td>
        <td>@this.ChainIndexer.Tip.HashBlock</td>
      </tr>
    </tbody>
  </table>
</div>

if (this.InitialBlockDownloadState.IsInitialBlockDownload())
{
    <p><strong>Currently processing IBD (the initial block download) & syncing your node with the network</strong></p>
}


<div class="table-responsive">
    <table class="table table-bordered table-striped table-sm table-hover">
        <thead class="thead">
            <tr>
                <th><strong>IP Address</strong></th>
                <th><strong>Inbound</strong></th>
                <th><strong>Agent</strong></th>
                <th><strong>Version</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var peer in this.ConnectionManager.ConnectedPeers)
            {
                <tr>
                    <td>@peer.RemoteSocketEndpoint.ToString()</td>
                    <td>@peer.Inbound</td>
                    <td>@peer.PeerVersion?.UserAgent</td>
                    <td>@peer.PeerVersion?.Version</td>
                </tr>
            }
        </tbody>
    </table>
</div>
}
@code
{
    private string NodeIp { get; set; }
    string Alert { get; set; }
    private void Addnode()
    {
        if (string.IsNullOrEmpty(this.NodeIp)) { this.Alert = "Please enter an IP address"; return; }
        this.Alert = string.Empty;

        var endpoint = this.NodeIp.ToIPEndPoint(this.ConnectionManager.Network.DefaultPort);

        this.ConnectionManager.AddNodeAddress(endpoint);

        this.Alert = $"node {endpoint} added";
    }
    private void Shutdown()
    {
        this.FullNode?.NodeLifetime.StopApplication();
    }

    private void NavigateToLogs()
    {
        NavigationManager.NavigateTo("logs");
    }
}
