@page "/walletview/{walletname}/{accountname}"

@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Features.Wallet.Api.Controllers
@using Blockcore.Features.Wallet.Api.Models

@inject NavigationManager NavigationManager
@inject IWalletManager WalletManager
@inject Network Network
@inject ModalService ModalService

@{
    var accountBalance = this.WalletManager.GetBalances(walletname, accountname).Single();

    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
        <h1 class="h2"><strong>Wallet</strong></h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <Dropdown TItem="string" OnSelected="@OnSelected">
                <InitialTip>@walletname</InitialTip>
                <ChildContent>
                    @foreach (var walletName in this.WalletManager.GetWalletsNames())
                    {
                        foreach (var account in this.WalletManager.GetAccounts(walletName))
                        {
                            <DropdownListItem Item="@walletName">@walletName</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
            <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToReceiveWallet(walletname, accountname); }">
                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Receive
            </button>
            <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToSendWallet(walletname, accountname); }">
                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Send
            </button>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-xl-12 col-sm-12 ">
            <div class="card">
                <div class="card-body">
                    <h5>Main Balance</h5>
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex align-items-center align-self-start">
                                <h3 class="text-left">@accountBalance.AmountConfirmed </h3>
                                <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                            </div>
                        </div>
                    </div>
                    <h6 class="text-left text-muted font-weight-normal">@accountBalance.AmountUnconfirmed (unconfirmed)</h6>
                </div>
            </div>
        </div>
    </div>

    // For now just show last 100 trx of history.
    var model = WalletModelBuilder.GetHistorySlim(this.WalletManager, Network, new WalletHistoryRequest { WalletName = walletname, AccountName = accountname, Take = 100 });
    <div class="row ">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="mx-3 mt-3">
                    <h4 class="card-title">History</h4>
                    <div class="table-responsive small">
                        <table class="table table-border-bottom table-striped table-sm table-hover">
                            <thead class="thead">
                                <tr>
                                    <th class="text-primary"><strong>TYPE</strong></th>
                                    <th class="text-primary text-center"><strong>DATE/TIME</strong></th>
                                    <th class="text-primary text-right"><strong>AMOUNT</strong></th>
                                    <th class="text-primary text-right"><strong>BLOCK</strong></th>
                                    <th class="text-primary text-center"><strong>DETAILS</strong></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var history in model.AccountsHistoryModel)
                                {
                                    foreach (var transaction in history.TransactionsHistory)
                                    {
                                        <tr>
                                            @* @onclick="ViewTransaction" > *@
                                            <td>@transaction.Type</td>
                                            <td class="text-center">@String.Format("{0:f}", transaction.Timestamp)</td>
                                            <td class="text-right">@transaction.Amount</td>
                                            <td class="text-right">@transaction.ConfirmedInBlock</td>
                                            <td class="text-center align-middle">
                                                <button class="btn btn-sm btn-secondary"> <span class="oi oi-list" aria-hidden="true"></span></button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }
    private void NavigateToWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletview/" + walletName + "/" + accountname);
    }
    private void NavigateToReceiveWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletreceive/" + walletName + "/" + accountname);
    }
    private void NavigateToSendWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletsend/" + walletName + "/" + accountname);
    }
    private void ViewTransaction()
    {
        ModalService.Show("Transaction Details", typeof(Modal.ModalViewTransaction));
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToWallet(selection, "account 0");
    }
}