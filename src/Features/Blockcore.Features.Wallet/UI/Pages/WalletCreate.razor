@page "/walletcreate"

@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Features.Wallet.Api.Controllers

@inject NavigationManager NavigationManager
@inject IWalletManager WalletManager
@inject Blockcore.Utilities.IDateTimeProvider DateTimeProvider
@inject IWalletSyncManager WalletSyncManager

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Create a Wallet</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
    </div>
</div>

<p>Create your wallet by generating a Mnemonic & adding an optional phrase. Then give your wallet a name & password.</p>
@{
<div class="row ">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <div class="input-group mb-3">
                    <button class="btn btn-primary" @onclick="GenerateMnemonic">Generate mnemonic</button>
                </div>
                <div class="input-group mb-3" style="max-width: 90%">
                    <div class="input-group-prepend">
                        <span style="min-width: 15em" class="input-group-text"><b>Mnemonic:</b></span>
                    </div>
                        <textarea @bind="Mnemonic" class="form-control" rows="2">@Mnemonic</textarea>
                </div>
                <p><strong>Important:</strong> The Mnemonic is your wallet and must be kept safe and secure.</p>
                <div class="input-group mb-3" style="max-width: 90%">
                    <div class="input-group-prepend">
                        <span style="min-width: 15em" class="input-group-text"><b>Passphrase (optional):</b></span>
                    </div>
                    <input @bind="Passphrase" type="password" class="form-control" placeholder="Enter a passphrase - this is optional but recommended" />
                </div>
                <p><strong>Important:</strong> The Passphrase is permanently linked to the wallet and must be kept safe and secure.</p>
                <div class="input-group mb-3" style="max-width: 90%">
                    <div class="input-group-prepend">
                        <span id="basic-addon1" style="min-width: 15em" class="input-group-text"><b>Wallet name:</b></span>
                    </div>
                        <input @bind="WalletName" type="text" class="form-control" placeholder="Please enter your wallet name" />
                </div>
                <div class="input-group mb-3" style="max-width: 90%">
                    <div class="input-group-prepend">
                        <span style="min-width: 15em" class="input-group-text"><b>Wallet Password:</b></span>
                    </div>
                        <input @bind="Password" type="password" class="form-control" placeholder="Please enter your password" />
                </div>
                <button class="btn btn-primary" @onclick="CreateWallet">Create wallet</button>
                <div class="input-group mb-3">
                    <div class="alert-warning">@Alert</div>
                </div>
            </div>
        </div>
    </div>
</div>
}

@code {
    public string WalletName { get; set; }
    public string AccountName { get; set; }
    public string Mnemonic { get; set; }
    private string Password { get; set; }
    private string Passphrase { get; set; }
    string Alert { get; set; }

    private void GenerateMnemonic()
    {
        var mnemonic = WalletModelBuilder.GenerateMnemonic(wordCount: 24);
        this.Mnemonic = mnemonic.ToString();
    }

    private void NavigateToReceiveWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletreceive/" + walletName + "/" + accountname);
    }

    private void NavigateToSendWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletsend/" + walletName + "/" + accountname);
    }

    private void NavigateToWallets()
    {
        NavigationManager.NavigateTo("wallets");
    }
    private void CreateWallet()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.Mnemonic)) { this.Alert = "Ensure that you have generated a new Mnemonic"; return; }
        if (string.IsNullOrEmpty(this.WalletName)) { this.Alert = "Please enter a wallet name"; return; }

        if (this.Passphrase == null)
            this.Passphrase = string.Empty;

        this.Alert = string.Empty;

        var requestMnemonic = new Mnemonic(this.Mnemonic);

        Mnemonic mnemonic = this.WalletManager.CreateWallet(this.Password, this.WalletName, this.Passphrase, mnemonic: requestMnemonic);

        // start syncing the wallet from the creation date
        this.WalletSyncManager.SyncFromDate(this.DateTimeProvider.GetUtcNow());

        NavigationManager.NavigateTo("walletaccount/" + WalletName + "/account 0");
    }
}