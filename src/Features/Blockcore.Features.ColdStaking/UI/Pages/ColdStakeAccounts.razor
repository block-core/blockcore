@page "/coldstaking-accounts/{walletname}"
@implements IDisposable

@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Interfaces
@using Blockcore.Networks
@using Blockcore.UI.BlazorModal
@using NBitcoin;
@using Blockcore.Consensus.Chain
@using Blockcore.EventBus
@using Blockcore.EventBus.CoreEvents
@using Blockcore.EventBus.CoreEvents.Peer
@using Blockcore.Features.Wallet.Events
@using Blockcore.Signals
@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Base.Deployments
@using Blockcore.Consensus.ScriptInfo
@using NBitcoin;
@using Blockcore.Features.Wallet;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject ChainIndexer ChainIndexer
@inject IWalletSyncManager WalletSyncManager
@inject IBroadcasterManager BroadcasterManager
@inject Network Network
@inject IPooledTransaction PooledTransaction
@inject Blockcore.Interfaces.IInitialBlockDownloadState InitialBlockDownloadState
@inject ModalService ModalService
@inject ISignals Signals
@inject NodeDeployments NodeDeployments

@{
    @if (!NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.CheckColdStakeVerify))
    {
        <h2>Cold staking is not activated</h2>
        return;
    }

    @if (!this.WalletManager.ContainsWallets)
    {
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
            <h1 class="h2"><strong>No wallets available</strong></h1>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
            <h1 class="h2"><strong>Wallet : @walletname </strong></h1>
            <div class="btn-toolbar mb-2 mb-md-0">

                <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToColdStakeWallets(); }">
                    <span class="oi oi-grid-three-up" aria-hidden="true"></span> Cold Stake Wallets
                </button>

            </div>
        </div>

        var wallets = ReadWallets();

        var totalConfirmed = wallets.Sum(w => w.Value.Main.AmountConfirmed);
        var totalUnconfirmed = wallets.Sum(w => w.Value.Main.AmountUnconfirmed);
        var totalConfirmedCold = wallets.Sum(w => w.Value.Cold?.AmountConfirmed ?? 0);
        var totalUnconfirmedCold = wallets.Sum(w => w.Value.Cold?.AmountUnconfirmed ?? 0);
        var totalConfirmedHot = wallets.Sum(w => w.Value.Hot?.AmountConfirmed ?? 0);
        var totalUnconfirmedHot = wallets.Sum(w => w.Value.Hot?.AmountUnconfirmed ?? 0);

        <div class="row mb-3">
            <div class="col-xl-6 col-sm-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Hot Balance</h5>
                    </div>
                    <div class="card-body">

                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex align-items-center align-self-start">
                                    <h3 class="text-left">@Money.Satoshis(totalConfirmedHot) </h3>
                                    <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                                </div>
                            </div>
                        </div>
                        <h6 class="text-left text-muted font-weight-normal">@Money.Satoshis(totalUnconfirmedHot) (unconfirmed)</h6>
                    </div>
                </div>
            </div>
            <div class="col-xl-6 col-sm-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Cold Balance</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex align-items-center align-self-start">
                                    <h3 class="text-left">@Money.Satoshis(totalConfirmedCold) </h3>
                                    <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                                </div>
                            </div>
                        </div>
                        <h6 class="text-left text-muted font-weight-normal">@Money.Satoshis(totalUnconfirmedCold) (unconfirmed)</h6>
                    </div>
                </div>
            </div>
        </div>

        <div class="row ">
            <div class="col-12 grid-margin">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Accounts</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive small">
                            <table class="table table-border-bottom table-striped table-sm table-hover">
                                <thead class="thead">
                                    <tr>
                                        <th class="text-primary"><strong>Account Name</strong></th>
                                        <th class="text-primary"><strong>CONFIRMED BALANCE</strong></th>
                                        <th class="text-primary"><strong>UNCONFIRMED BALANCE</strong></th>
                                        <th class="text-primary text-center"><strong>DETAILS</strong></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        var wallet = wallets.First();

                                        if (wallet.Value.Cold != null)
                                        {
                                            <tr>
                                                <td class="align-middle">
                                                    <button class="btn btn-sm btn-secondary" @onclick="() => { NavigateToColdStakeColdView(walletname); }">Cold account</button>
                                                </td>
                                                <td class="align-middle">@wallet.Value.Cold.AmountConfirmed</td>
                                                <td class="align-middle">@wallet.Value.Cold.AmountUnconfirmed</td>
                                                <td class="text-center align-middle">
                                                    <button class="btn btn-sm btn-secondary" @onclick="() => { NavigateToColdStakeColdView(walletname); }"> <span class="oi oi-arrow-right" aria-hidden="true"></span></button>
                                                </td>
                                            </tr>
                                        }

                                        if (wallet.Value.Hot != null)
                                        {
                                            <tr>
                                                <td class="align-middle">
                                                    <button class="btn btn-sm btn-secondary" @onclick="() => { NavigateToColdStakeHotView(walletname); }">Hot account</button>
                                                </td>
                                                <td class="align-middle">@wallet.Value.Hot.AmountConfirmed</td>
                                                <td class="align-middle">@wallet.Value.Hot.AmountUnconfirmed</td>
                                                <td class="text-center align-middle">
                                                    <button class="btn btn-sm btn-secondary" @onclick="() => { NavigateToColdStakeHotView(walletname); }"> <span class="oi oi-arrow-right" aria-hidden="true"></span></button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }
}
@code
{
    [Parameter]
    public string walletname { get; set; }
    
    ColdStakingManager ColdStakingManager;

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        return Task.CompletedTask;
    }

    private void NavigateToColdStakeWallets()
    {
        NavigationManager.NavigateTo("ColdStaking/");
    }
    private void NavigateToColdStakeColdView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/coldStakingColdAddresses");
    }
    private void NavigateToColdStakeHotView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/coldStakingHotAddresses");
    }
    private Dictionary<string, (Blockcore.Features.Wallet.Types.AccountBalance Main, Blockcore.Features.Wallet.Types.AccountBalance Cold, Blockcore.Features.Wallet.Types.AccountBalance Hot)> ReadWallets()
    {
        var walletBalances = new Dictionary<string, (Blockcore.Features.Wallet.Types.AccountBalance Main, Blockcore.Features.Wallet.Types.AccountBalance Cold, Blockcore.Features.Wallet.Types.AccountBalance Hot)>();

        foreach (var walletName in this.WalletManager.GetWalletsNames())
        {
            if (walletName == walletname)
            {
                foreach (var account in this.WalletManager.GetAccounts(walletName))
                {
                    Blockcore.Features.Wallet.Types.AccountBalance main = null;
                    Blockcore.Features.Wallet.Types.AccountBalance cold = null;
                    Blockcore.Features.Wallet.Types.AccountBalance hot = null;

                    main = this.WalletManager.GetBalances(walletName, account.Name).Single();

                    var coldStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                    if (coldStakingAccount != null)
                    {
                        cold = ColdStakingManager.GetBalances(walletName, coldStakingAccount.Name).Single();
                    }

                    var hotStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), false);
                    if (hotStakingAccount != null)
                    {
                        hot = ColdStakingManager.GetBalances(walletName, hotStakingAccount.Name).Single();
                    }

                    walletBalances.Add(walletName, (main, cold, hot));
                }
            }
        }

        return walletBalances;
    }

    List<SubscriptionToken> subscriptionTokens;

    public void Dispose()
    {
        if (subscriptionTokens != null)
        {
            foreach (var subscriptionToken in subscriptionTokens)
            {
                subscriptionToken.Dispose();
            }
        }
    }

}