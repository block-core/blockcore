@page "/wallets"

@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Interfaces
@using NBitcoin;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NBitcoin.ChainIndexer ChainIndexer
@inject IWalletSyncManager WalletSyncManager
@inject IBroadcasterManager BroadcasterManager
@inject Network Network
@inject IPooledTransaction PooledTransaction

@{
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Wallet Details</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToWalletCreate(); }">Create Wallet</button>
        <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToWalletRecover(); }">Recover Wallet</button>
        <button class="btn btn-sm btn-primary" @onclick="() => { Resync(); }">Resync wallets</button>
        <button class="btn btn-sm btn-primary" @onclick="() => { Rebroadcast(); }">Re-broadcast</button>
    </div>
</div>

<p>Wallet Tip: <strong> @this.WalletSyncManager.WalletTip.Height / @ChainIndexer.Height</strong></p>
<br />

<div class="table-responsive">
    <table class="table table-bordered table-striped table-sm table-hover">
        <thead class="thead">
            <tr>
                <th>Wallet</th>
                <th>Confirmed balance</th>
                <th>Unconfirmed balance</th>
            </tr>
        </thead>
        <tbody>
            @{
                foreach (var walletName in this.WalletManager.GetWalletsNames())
                {
                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                    {
                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();

                        <tr @onclick="() => { NavigateToWallet(walletName, account.Name); }">
                            <td>@walletName</td>
                            <td>@accountBalance.AmountConfirmed</td>
                            <td>@accountBalance.AmountUnconfirmed</td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>
}

@code
{
    private void NavigateToWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletaccount/" + walletName + "/" + accountname);
    }

    private void NavigateToWalletCreate()
    {
        NavigationManager.NavigateTo("walletcreate");
    }
    private void NavigateToWalletRecover()
    {
        NavigationManager.NavigateTo("walletrecover");
    }
    private void Resync()
    {
        this.WalletSyncManager.SyncFromHeight(1);
    }

    private async Task Rebroadcast()
    {
        foreach (string walletName in this.WalletManager.GetWalletsNames())
        {
            foreach (var unspentOutput in this.WalletManager.GetSpendableTransactionsInWallet(walletName, confirmations: 0))
            {
                if (unspentOutput.Confirmations == 0)
                {
                    var sent = await this.BroadcasterManager.BroadcastTransactionAsync(unspentOutput.Transaction.Id);

                    if (!sent)
                    {
                        if (!string.IsNullOrEmpty(unspentOutput.Transaction.Hex))
                        {
                            var trx = this.Network.Consensus.ConsensusFactory.CreateTransaction(unspentOutput.Transaction.Hex);
                            this.BroadcasterManager.BroadcastTransactionAsync(trx).GetAwaiter().GetResult();
                        }
                    }
                    else
                    {
                        var transaction = await this.PooledTransaction.GetTransaction(unspentOutput.Transaction.Id);
                        this.BroadcasterManager.BroadcastTransactionAsync(transaction).GetAwaiter().GetResult();
                    }
                }
            }
        }
    }
}