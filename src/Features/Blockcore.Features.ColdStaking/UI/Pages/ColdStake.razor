@page "/coldstaking"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Base.Deployments
@using NBitcoin;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NodeDeployments NodeDeployments

@if (!NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.CheckColdStakeVerify))
{
    <h2>Cold staking is not activated</h2>
    return;
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Cold Staking</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        @foreach (var walletName in this.WalletManager.GetWalletsNames()) {
            var coldStakingWalletEnabled = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
            if (coldStakingWalletEnabled != null) {} else {
                <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToEnableWallet(); }">Enable Cold Staking</button>
                break;
            }
        }
    </div>
</div>

@{        
<div class="table-responsive">
    <table class="table table-bordered table-striped table-sm table-hover">
        <thead class="thead">
            <tr>
                <th>Wallet</th>
                <th>Account balance</th>
                <th>Cold balance</th>
                <th>Hot balance</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var walletName in this.WalletManager.GetWalletsNames()) {
    
                var coldStakingWalletEnabled = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                if (coldStakingWalletEnabled != null) {
                    <tr @onclick="() => { NavigateToColdStakeView(walletName); }" >
                    <td>@walletName</td>
                    @foreach (var account in this.WalletManager.GetAccounts(walletName)) {

                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();
                        <td>@accountBalance.AmountConfirmed</td>

                        var coldStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                        
                        if (coldStakingAccount != null) {
                            var coldAccountBalance = ColdStakingManager.GetBalances(walletName, coldStakingAccount.Name).Single();
                            <td>@coldAccountBalance.AmountConfirmed</td>
                        }

                        var hotStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), false);
                        
                        if (hotStakingAccount != null) {
                            var hotAccountBalance = ColdStakingManager.GetBalances(walletName, hotStakingAccount.Name).Single();
                            <td>@hotAccountBalance.AmountConfirmed</td>
                        }
                }
            </tr>
            }
        }                               
        </tbody>
    </table>
    </div>
    }
@code
{
    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        return Task.CompletedTask;
    }

    private void NavigateToEnableWallet()
    {
        NavigationManager.NavigateTo("coldstaking-enablewallet");
    }
    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }

    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
    private void NavigateToDelegate(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-delegate/" + walletName);
    }
    private void NavigateToColdStakeView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/coldStakingColdAddresses");
    }    
}