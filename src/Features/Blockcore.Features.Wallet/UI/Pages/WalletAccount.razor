@page "/walletaccount/{walletname}/{accountname}"

@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Features.Wallet.Api.Controllers
@using Blockcore.Features.Wallet.Api.Models

@inject NavigationManager NavigationManager
@inject IWalletManager WalletManager
@inject Network Network

@{
var accountBalance = this.WalletManager.GetBalances(walletname, accountname).Single();

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2">Wallet Account: <strong>@walletname</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToReceiveWallet(walletname, accountname); }" >Receive</button>
        <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToSendWallet(walletname, accountname); }" >Send</button>
    </div>
</div>

<div class="container my-3">
    <h1>@accountBalance.AmountConfirmed <kbd>@this.Network.CoinTicker.ToUpper()</kbd></h1>
    <p class="text-left text-secondary">@accountBalance.AmountUnconfirmed (unconfirmed)</p>
</div>

// For now just show last 100 trx of history.
var model = WalletModelBuilder.GetHistory(this.WalletManager, Network, new WalletHistoryRequest { WalletName = walletname, AccountName = accountname, Take = 100 });

<div class="table-responsive">
    <table class="table table-bordered table-striped table-sm table-hover">
        <thead class="thead">
            <tr>
                <th><p class="small"><strong>TYPE</strong></p></th>
                <th><p class="small"><strong>DATE</strong></p></th>
                <th><p class="small"><strong>AMOUNT</strong></p></th>
                <th><p class="small"><strong>BLOCK</strong></p></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var history in model.AccountsHistoryModel)
            {
                foreach (var transaction in history.TransactionsHistory)
                {
                     <tr> @*@onclick="() => { NavigateToViewTx(transaction.Id); }" > *@
                        <td><p class="small">@transaction.Type</p></td>
                        <td><p class="small">@transaction.Timestamp</p></td>
                        <td><p class="small">@transaction.Amount</p></td>
                        <td><p class="small">@transaction.ConfirmedInBlock</p></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
}

@code {

    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }

    private void NavigateToReceiveWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletreceive/" + walletName + "/" + accountname);
    }

    private void NavigateToSendWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletsend/" + walletName + "/" + accountname);
    }

    private void NavigateToWallets()
    {
        NavigationManager.NavigateTo("wallets");
    }

    private void NavigateToViewTx(uint256 txId)
    {
        NavigationManager.NavigateTo("coldStakeviewtx");
    }
}