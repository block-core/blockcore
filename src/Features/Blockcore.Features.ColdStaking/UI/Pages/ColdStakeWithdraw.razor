@page "/coldstaking-withdraw/{walletname}"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Interfaces
@using Blockcore.Base.Deployments

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject Network Network
@inject IWalletTransactionHandler WalletTransactionHandler
@inject IBroadcasterManager BroadcasterManager
@inject NodeDeployments NodeDeployments

<h2>Coldstaking withdraw wallet: <strong> @walletname</strong></h2>

<p>Withdraw form a coldstaking cold wallet.</p>

@{
    var coldStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletname), true);
    if (coldStakingAccount != null)
    {
        var coldAccountBalance = ColdStakingManager.GetBalances(walletname, coldStakingAccount.Name).Single();

        <p>Amount Confirmed: <strong> @coldAccountBalance.AmountConfirmed</strong></p>
        <p>Amount Unconfirmed: <strong>@coldAccountBalance.AmountUnconfirmed</strong></p>
        <p>Spendable Amount: <strong> @coldAccountBalance.SpendableAmount</strong></p>
    }
    <hr />
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Password:</span>
        </div>
        <input @bind="Password" type="password" class="form-control" placeholder="password" />
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text" id="basic-addon1">Address:</span>
        </div>
        <input @bind="Address" type="text" class="form-control" placeholder="address" />
        <button class="btn btn-light btn-sm" @onclick="GenerateAddress">Get address from: @walletname</button>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Amount:</span>
        </div>
        <input @bind="Amount" type="text" class="form-control" placeholder="amount" />
        <div class="input-group-append">
            <span style="min-width: 10em" class="input-group-text">@this.Network.CoinTicker.ToUpper()</span>
        </div>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Fee:</span>
        </div>
        <input @bind="Fee" type="text" class="form-control" placeholder="fee" />
        <div class="input-group-append">
            <span style="min-width: 10em" class="input-group-text">Optional (default to low)</span>
        </div>
    </div>

    <div class="input-group mb-3">
        <button class="btn btn-info" @onclick="Withdraw">Withdraw from coldstake</button>
    </div>

    <div class="input-group mb-3">
        <div class="alert-warning">@Alert</div>
    </div>

}

@code
{
    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    [Parameter]
    public string walletname { get; set; }

    private string Address { get; set; }

    private string Password { get; set; }

    private decimal Amount { get; set; }

    private decimal Fee { get; set; }

    public bool IsColdWalletAccount { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        this.Fee = new Money(this.Network.MinTxFee).ToDecimal(MoneyUnit.BTC);

        return Task.CompletedTask;
    }

    private void GenerateAddress()
    {
        var result = this.WalletManager.GetUnusedAddress(new Wallet.Types.WalletAccountReference(this.walletname, "account 0"));

        var segwit = this.NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.Witness);

        this.Address = segwit ? result.Bech32Address : result.Address;
    }

    private async Task Withdraw()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.Address)) { this.Alert = "Please enter a withdrawal address"; return; }
        this.Alert = string.Empty;

        try
        {
            Transaction transaction = this.ColdStakingManager.GetColdStakingWithdrawalTransaction(
                this.WalletTransactionHandler,
                this.Address,
                this.walletname,
                this.Password,
                new Money(this.Amount, MoneyUnit.BTC),
                new Money(this.Fee, MoneyUnit.BTC));

            await this.BroadcasterManager.BroadcastTransactionAsync(transaction);

            var res = this.BroadcasterManager.GetTransaction(transaction.GetHash());

            if (res.TransactionBroadcastState == Connection.Broadcasting.TransactionBroadcastState.FailedBroadcast)
            {
                this.Alert = res.ErrorMessage;
                return;
            }

        }
        catch (Exception ex)
        {
            Alert = ex.Message;
            return;
        }

        NavigationManager.NavigateTo("coldstaking");
    }
}