@page "/coldstakeview/{walletName}/{accountname}"

@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Features.Wallet.Api.Controllers
@using Blockcore.Features.Wallet.Api.Models
@using Blockcore.Networks
@using Blockcore.UI.BlazorModal

@inject NavigationManager NavigationManager
@inject IWalletManager WalletManager
@inject Network Network
@inject ModalService ModalService

@{
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
        <h1 style="max-width: 18em" class="h2"><strong>@walletname : @accountType </strong></h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            
            @if(!isHot)
            {
                 <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToSetup(walletname); }">
                    <span class="oi oi-pulse" aria-hidden="true"></span> Coldstake
                </button>
                <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToDelegate(walletname); }">
                    <span class="oi oi-cloud-upload" aria-hidden="true"></span> Delegate
                </button>
                <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToWithdraw(walletname); }">
                    <span class="oi oi-cloud-download" aria-hidden="true"></span> Withdraw
                </button>   
            }
            else
            {
                
            }
            
             <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToColdStakeReceiveView(walletname, accountname); }">
                <span class="oi oi-cloud-download" aria-hidden="true"></span> Receive
            </button>
        </div>
    </div>

    var accountBalance = this.WalletManager.GetBalances(walletname, accountname).Single();

    <div class="row mb-3">
        <div class="col-xl-6 col-sm-6 ">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title"> @(isHot ? "Hot" : "Cold") Balance</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex align-items-center align-self-start">
                                <h3 class="text-left">@accountBalance.AmountConfirmed </h3>
                                <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                            </div>
                        </div>
                    </div>
                    <h6 class="text-left text-muted font-weight-normal">@accountBalance.AmountUnconfirmed (unconfirmed)</h6>
                </div>
            </div>
        </div>
    </div>

    // For now just show last 100 trx of history.
    var model = WalletModelBuilder.GetHistory(this.WalletManager, Network, new WalletHistoryRequest { WalletName = walletname, AccountName = accountname, Take = 100 });

    <div class="row ">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Balances</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive small">
                        <table class="table table-border-bottom table-striped table-sm table-hover">
                            <thead class="thead">
                                <tr>
                                    <th class="text-primary"><strong>TYPE</strong></th>
                                    <th class="text-primary text-center"><strong>DATE/TIME</strong></th>
                                    <th class="text-primary text-right"><strong>AMOUNT</strong></th>
                                    <th class="text-primary text-right"><strong>BLOCK</strong></th>
                                    <th class="text-primary text-center"><strong>DETAILS</strong></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var history in model.AccountsHistoryModel)
                                {
                                    foreach (var transaction in history.TransactionsHistory)
                                    {
                                        <tr>
                                            @* @onclick="ViewTransaction"> *@
                                            <td>@transaction.Type</td>
                                            <td class="text-center">@String.Format("{0:f}", transaction.Timestamp)</td>
                                            <td class="text-right">@transaction.Amount</td>
                                            <td class="text-right">@transaction.ConfirmedInBlock</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-secondary"><span class="oi oi-list" aria-hidden="true"></span></button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }

    ColdStakingManager ColdStakingManager;
    private string accountType = "unknown";
    private bool isHot = true;

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        if (accountname == "coldStakingHotAddresses")
            accountType = "hot-account";

        if (accountname == "coldStakingColdAddresses")
            accountType = "cold-account";

        isHot = accountType == "hot-account" ? true : false;

        return Task.CompletedTask;
    }

    private void NavigateToEnableWallet()
    {
        NavigationManager.NavigateTo("coldstaking-enablewallet");
    }
    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }

    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
    private void NavigateToDelegate(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-delegate/" + walletName);
    }
    private void NavigateToColdStakeReceiveView(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("coldstakereceive/" + walletName + "/" + accountname);
    }
    private void ViewTransaction()
    {
        ModalService.Show("Transaction Details", typeof(Modal.ModalViewTransaction));
    }
}