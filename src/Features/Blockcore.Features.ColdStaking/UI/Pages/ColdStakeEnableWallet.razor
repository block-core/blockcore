@page "/coldstaking-enablewallet"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Base.Deployments
@using NBitcoin;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NodeDeployments NodeDeployments

@if (!NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.CheckColdStakeVerify))
{
    <h2>Cold staking is not activated</h2>
    return;
}

<h2><strong>Enable cold staking on an existing wallet</strong></h2>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text" id="basic-addon1">Wallet Name:</span>
        </div>
        <select @bind="WalletName" type="text" class="form-control" placeholder="wallet name">
            @{
                foreach (var walletName in this.WalletManager.GetWalletsNames())
                {
                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                    {
                        <option>@walletName</option>
                    }
                }
            }
        </select>
    </div>


    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Password:</span>
        </div>
        <input @bind="Password" type="password" class="form-control" placeholder="password" />
    </div>

    <div class="input-group mb-3">
        <button class="btn btn-info" @onclick="CreateColdStakeAccount">Enable Cold Staking</button>
    </div>

@code
{
    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    private string WalletName { get; set; }

    private string Password { get; set; }

    public bool IsColdWalletAccount { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        return Task.CompletedTask;
    }

    private void CreateColdStakeAccount()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter your password"; return; }
        if (string.IsNullOrEmpty(this.WalletName)) { this.Alert = "Please enter your wallet name"; return; }
        this.Alert = string.Empty;

        this.ColdStakingManager.GetOrCreateColdStakingAccount(this.WalletName, true, this.Password);
        this.ColdStakingManager.GetOrCreateColdStakingAccount(this.WalletName, false, this.Password);
    }

}