@page "/coldstakeview/{walletName}/{accountname}"

@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Features.Wallet.Api.Controllers
@using Blockcore.Features.Wallet.Api.Models

@inject NavigationManager NavigationManager
@inject IWalletManager WalletManager
@inject Network Network

@{

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Cold Staking Dashboard for @walletname</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToSetup(walletname); }">Coldstake</button>
        <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToDelegate(walletname); }">Delegate</button>
        <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToWithdraw(walletname); }">Withdraw</button>
    </div>
</div>

var accountBalance = this.WalletManager.GetBalances(walletname, accountname).Single();
var mainAccountBalance = this.WalletManager.GetBalances(walletname, "account 0").Single();

<div class="row">
  <div class="col-sm-6">
    <h1 class="text-left">@accountBalance.AmountConfirmed <kbd>@this.Network.CoinTicker.ToUpper()</kbd></h1>
    <p class="text-left text-secondary">@accountBalance.AmountUnconfirmed (unconfirmed)</p>
  </div>

  <div class="col-sm-6">
    <h2 class="text-right">@mainAccountBalance.AmountConfirmed <kbd>@this.Network.CoinTicker.ToUpper()</kbd></h2>
    <p class="text-right text-secondary">@mainAccountBalance.AmountUnconfirmed (unconfirmed)</p>
  </div> 
</div>

// For now just show last 100 trx of history.
var model = WalletModelBuilder.GetHistory(this.WalletManager, Network, new WalletHistoryRequest { WalletName = walletname, AccountName = accountname, Take = 100 });

<div class="table-responsive small">
    <table class="table table-bordered table-striped table-sm table-hover">
        <thead class="thead">
            <tr>
                <th><strong>TYPE</strong></th>
                <th><strong>DATE/TIME</strong></th>
                <th><strong>AMOUNT</strong></th>
                <th><strong>BLOCK</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var history in model.AccountsHistoryModel)
            {
                foreach (var transaction in history.TransactionsHistory)
                {
                    <tr> @* @onclick="() => { NavigateToViewTx(transaction.Id); }" *@
                        <td>@transaction.Type</td>
                        <td>@String.Format("{0:f}", transaction.Timestamp)</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.ConfirmedInBlock</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
}

@code {

    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }

    private void NavigateToEnableWallet()
    {
        NavigationManager.NavigateTo("coldstaking-enablewallet");
    }
    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }

    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
    private void NavigateToDelegate(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-delegate/" + walletName);
    }

    private void NavigateToViewTx(uint256 txId)
    {
        NavigationManager.NavigateTo("coldStakeviewtx");
    }
}