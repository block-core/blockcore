@page "/coldstaking-setup/{walletname}"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Interfaces
@using Blockcore.Base.Deployments

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject Network Network
@inject IWalletTransactionHandler WalletTransactionHandler
@inject IBroadcasterManager BroadcasterManager
@inject NodeDeployments NodeDeployments

<h2>Coldstaking setup wallet:  <strong> @walletname</strong></h2>

<p>Setup cold staking.</p>

@{
    var accountBalance = this.WalletManager.GetBalances(walletname, "account 0").Single();

    <table class="table">
        <thead>
            <tr>
                <th>Amount Confirmed</th>
                <th>Amount Unconfirmed</th>
                <th>Spendable Amount</th>
            </tr>
        </thead>
        <tbody>
                    <tr>
                        <td>@accountBalance.AmountConfirmed</td>
                        <td>@accountBalance.AmountUnconfirmed</td>
                        <td>@accountBalance.SpendableAmount</td>
                    </tr>
        </tbody>
    </table>
    <hr />

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text" id="basic-addon1">ColdWalletAddress:</span>
        </div>
        <input @bind="ColdWalletAddress" type="text" class="form-control" placeholder="ColdWalletAddress" />
        <div class="input-group-append">
            <span style="min-width: 10em" class="input-group-text">from wallet: @walletname</span>
        </div>
    </div>

    <div class="input-group mb-3">
        @foreach (var walletNameItem in this.WalletManager.GetWalletsNames().Where(w => w != walletname))
        {
            <button class="btn btn-secondary btn-sm" @onclick="() => { GetHotWalletAddress(walletNameItem); }">From: @walletNameItem</button>
        }
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text" id="basic-addon1">HotWalletAddress:</span>
        </div>
        <input @bind="HotWalletAddress" type="text" class="form-control" placeholder="HotWalletAddress" />
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Amount:</span>
        </div>
        <input @bind="Amount" type="text" class="form-control" placeholder="amount" />
        <div class="input-group-append">
            <span style="min-width: 10em" class="input-group-text">@this.Network.CoinTicker.ToUpper()</span>
        </div>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Fee:</span>
        </div>
        <input @bind="Fee" type="text" class="form-control" placeholder="fee" />
        <div class="input-group-append">
            <span style="min-width: 10em" class="input-group-text">Optional (default to low)</span>
        </div>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Password:</span>
        </div>
        <input @bind="Password" type="password" class="form-control" placeholder="password" />
    </div>

    <div class="input-group mb-3">
        <button class="btn btn-secondary btn-sm" @onclick="ChangePayToScript">PayToScript: @PayToScript</button>
    </div>

    <div class="input-group mb-3">
        <button class="btn btn-info" @onclick="Setup">Setup coldstaking</button>
    </div>

    <div class="input-group mb-3">
        <div class="alert-warning">@Alert</div>
    </div>
}

@code
{
    [Parameter]
    public string walletname { get; set; }

    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    private string HotWallet { get; set; }

    private string HotWalletAddress { get; set; }

    private string ColdWalletAddress { get; set; }

    private string Password { get; set; }

    private decimal Amount { get; set; }

    private decimal Fee { get; set; }

    public bool SegwitChangeAddress { get; set; }

    public bool PayToScript { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        this.Fee = new Money(this.Network.MinTxFee).ToDecimal(MoneyUnit.BTC);

        var address = this.ColdStakingManager.GetFirstUnusedColdStakingAddress(this.walletname, true);

        this.SegwitChangeAddress = this.NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.Witness);

        this.ColdWalletAddress = this.SegwitChangeAddress ? address?.Bech32Address : address?.Address;

        if (this.ColdWalletAddress == null)
        {
            this.Alert = "The cold staking account does not exist.";
            return Task.CompletedTask;
        }

        return Task.CompletedTask;
    }

    private void GetHotWalletAddress(string hotWalletName)
    {
        var address = this.ColdStakingManager.GetFirstUnusedColdStakingAddress(hotWalletName, false);

        this.HotWalletAddress = this.SegwitChangeAddress ? address?.Bech32Address : address?.Address;

        if (this.HotWalletAddress == null)
        {
            this.Alert = $"The cold staking account does not exist on wallet {hotWalletName}.";
            return;
        }
    }

    private void ChangePayToScript()
    {
        this.PayToScript = !this.PayToScript;
    }

    private async Task Setup()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.ColdWalletAddress)) { this.Alert = "Your cold wallet address is missing"; return; }
        if (string.IsNullOrEmpty(this.HotWalletAddress)) { this.Alert = "Your hot wallet address is missing"; return; }

        this.Alert = string.Empty;

        try
        {
            Transaction transaction = this.ColdStakingManager.GetColdStakingSetupTransaction(
                this.WalletTransactionHandler,
                this.ColdWalletAddress,
                this.HotWalletAddress,
                this.walletname,
                "account 0",
                this.Password,
                new Money(this.Amount, MoneyUnit.BTC),
                new Money(this.Fee, MoneyUnit.BTC),
                this.SegwitChangeAddress,
                this.PayToScript);

            await this.BroadcasterManager.BroadcastTransactionAsync(transaction);

            var res = this.BroadcasterManager.GetTransaction(transaction.GetHash());

            if (res.TransactionBroadcastState == Connection.Broadcasting.TransactionBroadcastState.FailedBroadcast)
            {
                this.Alert = res.ErrorMessage;
                return;
            }
        }
        catch (Exception ex)
        {
            Alert = ex.Message;
            return;
        }

        NavigationManager.NavigateTo("coldstaking");
    }
}