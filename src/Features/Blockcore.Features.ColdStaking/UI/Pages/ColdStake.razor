@page "/coldstaking"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Base.Deployments
@using NBitcoin;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NodeDeployments NodeDeployments
@inject Network Network


@if (!NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.CheckColdStakeVerify))
{
    <h2>Cold staking is not activated</h2>
    return;
}

@if (!this.WalletManager.ContainsWallets) {
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
        <h1 class="h2"><strong>No wallets available</strong></h1>
        <div class="btn-toolbar mb-2 mb-md-0">
        </div>
    </div>
} else {
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Cold Staking</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0 mr-3">
       @if (this.ColdStakingManager.GetWalletsNames().Count() > 1) {
            <Dropdown TItem="string" OnSelected="@OnSelected" >
                <InitialTip>Select Wallet</InitialTip>
                <ChildContent>
                        @foreach (var walletName in this.ColdStakingManager.GetWalletsNames()) {
                            var coldStakingWalletEnabled = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                                if (coldStakingWalletEnabled != null) {
                                    foreach (var account in this.ColdStakingManager.GetAccounts(walletName))
                                    {
                                        <DropdownListItem Item="@walletName">@walletName</DropdownListItem>
                                    }
                                }
                            }
                </ChildContent>
            </Dropdown>
        }
    @foreach (var walletName in this.WalletManager.GetWalletsNames()) {
        var coldStakingWalletEnabled = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
        if (coldStakingWalletEnabled != null) {} else {
            <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToEnableWallet(); }">Enable Cold Staking</button>
            break;
        }
    }
</div>
</div>

<div class="row mb-3">
    <div class="col-xl-6 col-sm-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h5>Main Balance</h5>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex align-items-center align-self-start">
                            <h3 class="text-left">@totalBalance().balance </h3>
                            <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                        </div>
                    </div>
                </div>
                <h6 class="text-left text-muted font-weight-normal">@totalUnconfirmedBalance().balance (unconfirmed)</h6>
            </div>
        </div>
    </div>
    <div class="col-xl-6 col-sm-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h5>Cold Balance</h5>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex align-items-center align-self-start">
                            <h3 class="text-left">@totalBalance().coldBalance </h3>
                            <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                        </div>
                    </div>
                </div>
                <h6 class="text-left text-muted font-weight-normal">@totalUnconfirmedBalance().coldBalance (unconfirmed)</h6>
            </div>
        </div>
    </div>
</div>

<div class="row ">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="mx-3 mt-3">
                <h4 class="card-title">Balances</h4>
                <div class="table-responsive small">
                    <table class="table table-border-bottom table-striped table-sm table-hover">
                        <thead class="thead">
                            <tr>
                                <th class="text-primary"><strong>WALLET</strong></th>
                                <th class="text-primary"><strong>MAIN BALANCE</strong></th>
                                <th class="text-primary"><strong>COLD BALANCE</strong></th>
                                <th class="text-primary"><strong>HOT BALANCE</strong></th>
                                <th class="text-primary text-center"><strong>DETAILS</strong></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var walletName in this.WalletManager.GetWalletsNames()) {
                    
                                var coldStakingWalletEnabled = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                                if (coldStakingWalletEnabled != null) {
                                    <tr @onclick="() => { NavigateToColdStakeView(walletName); }" >
                                    <td class="align-middle">@walletName</td>
                                    @foreach (var account in this.WalletManager.GetAccounts(walletName)) {

                                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();

                                        @if (@accountBalance.AmountUnconfirmed >0) {
                                            <td class="align-middle">@accountBalance.AmountConfirmed (@accountBalance.AmountUnconfirmed )</td>
                                        } else {
                                            <td class="align-middle">@accountBalance.AmountConfirmed</td>
                                        }

                                        var coldStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                                        
                                        if (coldStakingAccount != null) {
                                            var coldAccountBalance = ColdStakingManager.GetBalances(walletName, coldStakingAccount.Name).Single();
                                            @if (@coldAccountBalance.AmountUnconfirmed >0) {
                                                <td class="align-middle">@coldAccountBalance.AmountConfirmed (@coldAccountBalance.AmountUnconfirmed )</td>
                                            } else {
                                                <td class="align-middle">@coldAccountBalance.AmountConfirmed</td>
                                            }
                                        }

                                        var hotStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), false);
                                        
                                        if (hotStakingAccount != null) {
                                            var hotAccountBalance = ColdStakingManager.GetBalances(walletName, hotStakingAccount.Name).Single();
                                            @if (@hotAccountBalance.AmountUnconfirmed >0) {
                                                <td class="align-middle">@hotAccountBalance.AmountConfirmed (@hotAccountBalance.AmountUnconfirmed )</td>
                                            } else {
                                                <td class="align-middle">@hotAccountBalance.AmountConfirmed</td>
                                            }
                                        }
                                }
                                <td class="text-center">
                                    <button class="btn btn-sm btn-secondary"><span class="oi oi-arrow-right" aria-hidden="true"></span></button>
                                </td>
                            </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
}
@code
{
    ColdStakingManager ColdStakingManager;
    string Alert { get; set; }
    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        return Task.CompletedTask;
    }
    private (dynamic balance, dynamic coldBalance) totalBalance()
    {
        dynamic balance = 0;
        dynamic coldBalance = 0;
              foreach (var walletName in this.WalletManager.GetWalletsNames())
                {
                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                    {
                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();
                        balance = balance + accountBalance.AmountConfirmed;

                        var coldStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                        if (coldStakingAccount != null) {
                            var coldAccountBalance = ColdStakingManager.GetBalances(walletName, coldStakingAccount.Name).Single();
                            coldBalance = coldBalance + coldAccountBalance.AmountConfirmed;
                        }
                    }
                }
        return (balance,coldBalance);
    }

    private (dynamic balance, dynamic coldBalance) totalUnconfirmedBalance()
    {
        dynamic balance = 0;
        dynamic coldBalance = 0;
              foreach (var walletName in this.WalletManager.GetWalletsNames())
                {
                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                    {
                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();
                        balance = balance + accountBalance.AmountUnconfirmed;

                        var coldStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                        if (coldStakingAccount != null) {
                            var coldAccountBalance = ColdStakingManager.GetBalances(walletName, coldStakingAccount.Name).Single();
                            coldBalance = coldBalance + coldAccountBalance.AmountUnconfirmed;
                        }
                    }
                }
        return (balance,coldBalance);
    }
    private void NavigateToEnableWallet()
    {
        NavigationManager.NavigateTo("coldstaking-enablewallet");
    }
    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }

    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
    private void NavigateToDelegate(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-delegate/" + walletName);
    }
    private void NavigateToColdStakeView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/coldStakingColdAddresses");
    }    
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToColdStakeView(selection);
    }

}