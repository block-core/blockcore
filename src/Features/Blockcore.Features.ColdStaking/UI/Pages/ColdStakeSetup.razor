@page "/coldstaking-setup/{walletname}"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using NBitcoin;
@using Blockcore.Base.Deployments
@using Blockcore.Features.Wallet;
@using Blockcore.Features.Wallet.Types
@using Blockcore.Interfaces

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject Network Network
@inject IWalletTransactionHandler WalletTransactionHandler
@inject IBroadcasterManager BroadcasterManager
@inject NodeDeployments NodeDeployments

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Cold Staking Setup</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
       @if (this.ColdStakingManager.GetWalletsNames().Count() > 1) {
            <Dropdown TItem="string" OnSelected="@OnSelected" >
                <InitialTip>@walletname</InitialTip>
                <ChildContent>
                        @foreach (var walletName in this.ColdStakingManager.GetWalletsNames()) {
                            var coldStakingWalletEnabled = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                                if (coldStakingWalletEnabled != null) {
                                    foreach (var account in this.ColdStakingManager.GetAccounts(walletName))
                                    {
                                        <DropdownListItem Item="@walletName">@walletName</DropdownListItem>
                                    }
                                }
                            }
                </ChildContent>
            </Dropdown>
        }
        <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToDelegate(walletname); }">
            <span class="oi oi-cloud-upload" aria-hidden="true"></span> Delegate</button>
        <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToWithdraw(walletname); }">
            <span class="oi oi-cloud-download" aria-hidden="true"></span> Withdraw</button>

    </div>
</div>

@{
    var accountBalance = this.WalletManager.GetBalances(walletname, "coldStakingColdAddresses").Single();
    var mainAccountBalance = this.WalletManager.GetBalances(walletname, "account 0").Single();

    <div class="row mb-3">
        <div class="col-xl-6 col-sm-6 ">
            <div class="card">
                <div class="card-body">
                    <h5>Main Balance</h5>
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex align-items-center align-self-start">
                                <h3 class="text-left">@mainAccountBalance.AmountConfirmed</h3>
                                <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                            </div>
                        </div>
                    </div>
                    <h6 class="text-left text-muted font-weight-normal">@mainAccountBalance.AmountUnconfirmed (unconfirmed)</h6>
                </div>
            </div>
        </div>
        <div class="col-xl-6 col-sm-6 ">
            <div class="card">
                <div class="card-body">
                    <h5>Cold Balance</h5>
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex align-items-center align-self-start">
                                <h3 class="text-left">@accountBalance.AmountConfirmed </h3>
                                <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                            </div>
                        </div>
                    </div>
                    <h6 class="text-left text-muted font-weight-normal">@accountBalance.AmountUnconfirmed (unconfirmed)</h6>
                </div>
            </div>
        </div>
    </div>

    <div class="row ">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-body">
                    <div class="input-group mb-3">
                        <div class="input-group-prepend mb-3">
                            <span style="min-width: 10em" class="input-group-text m-1" id="basic-addon1">Hot Address:</span>
                        </div>
                        <input @bind="HotWalletAddress" type="text" class="form-control bg-secondary text-light m-1" placeholder="Select the wallet from which you will cold stake" />

                        <div class="input-group-append mb-3">
                            <div class="btn-toolbar mb-3 mb-md-0">
                                @{
                                    foreach (var walletName in this.WalletManager.GetWalletsNames().Where(w => w != walletname))
                                    {
                                        var coldStakingWalletEnabled = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                                        if (coldStakingWalletEnabled != null)
                                        {
                                            <button class="btn btn-secondary m-1" @onclick="() => { GetHotWalletAddress(walletName); }">@walletName</button>
                                        }
                                    }
                                }
                            </div>
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span style="min-width: 10em" class="input-group-text m-1">Amount (@this.Network.CoinTicker.ToUpper()):</span>
                            </div>
                            <input @bind="Amount" type="text" class="form-control bg-secondary text-light m-1" placeholder="amount" />
                            <div class="input-group-append">
                                <button class="btn btn-secondary m-1" @onclick="SendMax">Max</button>
                            </div>
                        </div>

                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span style="min-width: 10em" class="input-group-text m-1">Fee:</span>
                            </div>
                            <input @bind="Fee" type="text" class="form-control bg-secondary text-light m-1" placeholder="fee" />
                        </div>

                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span style="min-width: 10em" class="input-group-text m-1">Password:</span>
                            </div>
                            <input @bind="Password" type="password" class="form-control bg-secondary text-light m-1" placeholder="Please enter your password" />
                        </div>
                        <div class="btn-toolbar mb-3 mb-md-0">
                            <button class="btn btn-primary mr-1" @onclick="Setup">Setup coldstaking</button>
                            <button class="btn btn-primary" @onclick="ChangePayToScript">PayToScript: @PayToScript</button>
                        </div>
                        <div class="input-group">
                            <div class="text-danger">@Alert</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public string walletname { get; set; }

    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    private string HotWallet { get; set; }

    private string HotWalletAddress { get; set; }

    private string ColdWalletAddress { get; set; }

    private string Password { get; set; }

    private decimal Amount { get; set; }

    private decimal Fee { get; set; }

    public bool SegwitChangeAddress { get; set; }

    public bool PayToScript { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        this.Fee = new Money(this.Network.MinTxFee).ToDecimal(MoneyUnit.BTC);

        var address = this.ColdStakingManager.GetFirstUnusedColdStakingAddress(this.walletname, true);

        this.SegwitChangeAddress = this.NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.Witness);

        this.ColdWalletAddress = this.SegwitChangeAddress ? address?.Bech32Address : address?.Address;

        if (this.ColdWalletAddress == null)
        {
            this.Alert = "The cold staking account does not exist.";
            return Task.CompletedTask;
        }

        return Task.CompletedTask;
    }

    private void GetHotWalletAddress(string hotWalletName)
    {
        var address = this.ColdStakingManager.GetFirstUnusedColdStakingAddress(hotWalletName, false);

        this.HotWalletAddress = this.SegwitChangeAddress ? address?.Bech32Address : address?.Address;

        if (this.HotWalletAddress == null)
        {
            this.Alert = $"The cold staking account does not exist on wallet {hotWalletName}.";
            return;
        }
    }
    public void SendMax()
    {
        var mainAccountBalance = this.WalletManager.GetBalances(walletname, "account 0").Single();

        this.Amount = mainAccountBalance.AmountConfirmed.ToUnit(MoneyUnit.BTC);

        this.Amount = this.Amount - this.Fee;

        if (this.PayToScript)
        {
            TxNullDataTemplate template = this.Network.StandardScriptsRegistry.GetScriptTemplates.OfType<TxNullDataTemplate>().First();

            this.Amount = this.Amount - new Money(template.MinRequiredSatoshiFee, MoneyUnit.Satoshi).ToUnit(MoneyUnit.BTC);
        }
    }

    private void ChangePayToScript()
    {
        this.PayToScript = !this.PayToScript;
    }
    public void MaxAmount()
    {
        var accountBalance = this.WalletManager.GetBalances(walletname, "account 0").Single();
        this.Amount = accountBalance.AmountConfirmed.ToDecimal(MoneyUnit.BTC) - this.Fee;
    }
    private async Task Setup()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.ColdWalletAddress)) { this.Alert = "Your cold wallet address is missing"; return; }
        if (string.IsNullOrEmpty(this.HotWalletAddress)) { this.Alert = "Your hot wallet address is missing"; return; }

        this.Alert = string.Empty;

        try
        {
            Transaction transaction = this.ColdStakingManager.GetColdStakingSetupTransaction(
                this.WalletTransactionHandler,
                this.ColdWalletAddress,
                this.HotWalletAddress,
                this.walletname,
                "account 0",
                this.Password,
                new Money(this.Amount, MoneyUnit.BTC),
                new Money(this.Fee, MoneyUnit.BTC),
                this.SegwitChangeAddress,
                this.PayToScript);

            await this.BroadcasterManager.BroadcastTransactionAsync(transaction);

            var res = this.BroadcasterManager.GetTransaction(transaction.GetHash());

            if (res.TransactionBroadcastState == Connection.Broadcasting.TransactionBroadcastState.FailedBroadcast)
            {
                this.Alert = res.ErrorMessage;
                return;
            }
        }
        catch (Exception ex)
        {
            Alert = ex.Message;
            return;
        }
        //TODO: Add confirmation screen
        NavigationManager.NavigateTo("coldstakeview/" + walletname + "/coldStakingColdAddresses");
    }
    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }
    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
    private void NavigateToDelegate(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-delegate/" + walletName);
    }
    private void NavigateToColdStakeView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/coldStakingColdAddresses");
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToColdStakeView(selection);
    }
}