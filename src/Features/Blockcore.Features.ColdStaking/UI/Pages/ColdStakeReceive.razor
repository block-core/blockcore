@page "/coldstakereceive/{walletname}/{accountname}"

@using Blockcore.Features.Wallet.Api.Models
@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Features.Wallet;
@using Blockcore.Features.Wallet.Types
@using Blockcore.Base.Deployments
@using Blockcore.Consensus.ScriptInfo
@using Blockcore.Networks
@using NBitcoin;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NodeDeployments NodeDeployments
@inject Network Network

@{
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
         <h1 class="h2"><strong>@walletname : @accountType : receive </strong></h1>
        <div class="btn-toolbar mb-2 mb-md-0">
             <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToColdStakeView(walletname, accountname); }">
                <span class="oi oi-pulse" aria-hidden="true"></span> ColdStake View
            </button>
        </div>
    </div>

    var result = this.WalletManager.GetUnusedAddress(new WalletAccountReference(walletname, accountname));

    <div class="card mb-3">
        <div class="card-header">
            <div class="card-title">Address</div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-sm-2"><strong>Address:</strong></div>
                <div class="col-sm-10"><CopyToClipboard Text="@result.Address" /></div>
            </div>
        </div>
    </div>

    Blockcore.Features.Wallet.Types.Wallet wallet = this.WalletManager.GetWallet(walletname);
    HdAccount account = wallet.GetAccount(accountname);

    var accountmodel = new AddressesModel
            {
                Addresses = account.GetCombinedAddresses().Select(address =>
                {
                    (Money confirmedAmount, Money unConfirmedAmount, bool anyTrx) = address.GetBalances(wallet.walletStore, account.IsNormalAccount());

                    return new AddressModel
                    {
                        // Address = (bool)(NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.Witness)) ? address.Bech32Address : address.Address,
                        Address = address.Address,
                        IsUsed = anyTrx,
                        IsChange = address.IsChangeAddress(),
                        AmountConfirmed = confirmedAmount,
                        AmountUnconfirmed = unConfirmedAmount
                    };
                })
            };

    <div class="row mb-3">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title">
                        Account Address
                    </h5>
                    <div class="btn-group" role="group" aria-label="Basic example">
                                       
                    @if (ShowTab_UnUsedAddress)
                    {
                        <button type="button" class="btn btn-sm btn-primary mr-1" @onclick="generateAddress">Generate a new address</button>
                    }

                        <button type="button" class="btn btn-sm btn-primary " @onclick="tabShowUsedAddress">Used</button>
                        <button type="button" class="btn btn-sm btn-primary " @onclick="tabShowUnUsedAddress">UnUsed</button>
                        <button type="button" class="btn btn-sm btn-primary " @onclick="tabShowIsChangedAddress">Changed</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive small">
                        <table class="table table-border-bottom table-striped table-sm table-hover">
                            <thead class="thead">
                                <tr>
                                    <th class="text-primary"><strong>Address</strong></th>
                                    <th class="text-primary text-center"><strong>Is Change</strong></th>
                                    <th class="text-primary text-center"><strong>Confirmed amount</strong></th>
                                    <th class="text-primary text-center"><strong>Unconfirmed amount</strong></th>
                                </tr>
                            </thead>

                            @if (ShowTab_UsedAddress)
                            {
                                <tbody>
                                    @foreach (var _address in @accountmodel.Addresses.Where(li => li.IsUsed == true))
                                    {

                                        <tr>
                                            @* @onclick="ViewTransaction" > *@
                                            <td><CopyToClipboard Text="@_address.Address" /> </td>
                                            <td class="text-center">@_address.IsChange</td>
                                            <td class="text-center">@_address.AmountConfirmed</td>
                                            <td class="text-center">@_address.AmountUnconfirmed</td>
                                        </tr>

                                    }
                                </tbody>

                            }

                            @if (ShowTab_UnUsedAddress)
                            {
                                <tbody>
                                    @foreach (var _address in @accountmodel.Addresses.Where(li => li.IsUsed == false && li.IsChange == false))
                                    {
                                        <tr>
                                            @* @onclick="ViewTransaction" > *@
                                            <td><CopyToClipboard Text="@_address.Address" /> </td>
                                            <td class="text-center">@_address.IsChange</td>
                                            <td class="text-center">@_address.AmountConfirmed</td>
                                            <td class="text-center">@_address.AmountUnconfirmed</td>
                                        </tr>

                                    }
                                </tbody>

                            }

                            @if (ShowTab_IsChanged)
                            {
                                <tbody>
                                    @foreach (var _address in @accountmodel.Addresses.Where(li => li.IsUsed = false && li.IsChange == true))
                                    {
                                        <tr>
                                            @* @onclick="ViewTransaction" > *@
                                            <td><CopyToClipboard Text="@_address.Address" /> </td>
                                            <td class="text-center">@_address.IsChange</td>
                                            <td class="text-center">@_address.AmountConfirmed</td>
                                            <td class="text-center">@_address.AmountUnconfirmed</td>
                                        </tr>
                                    }
                                </tbody>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }


    public Boolean ShowTab_UsedAddress = true;
    public Boolean ShowTab_UnUsedAddress = false;
    public Boolean ShowTab_IsChanged = false;

    private string accountType = "unknown";

    protected override Task OnInitializedAsync()
    {
        if (accountname == "coldStakingHotAddresses")
            accountType = "hot-account";

        if (accountname == "coldStakingColdAddresses")
            accountType = "cold-account";

        return Task.CompletedTask;
    }

    private void tabShowUsedAddress()
    {
        ShowTab_UsedAddress = true;
        ShowTab_UnUsedAddress = false;
        ShowTab_IsChanged = false;
    }

    private void tabShowUnUsedAddress()
    {
        ShowTab_UsedAddress = false;
        ShowTab_UnUsedAddress = true;
        ShowTab_IsChanged = false;
    }

    private void tabShowIsChangedAddress()
    {
        ShowTab_UsedAddress = false;
        ShowTab_UnUsedAddress = false;
        ShowTab_IsChanged = true;
    }

    private void NavigateToColdStakeView(string walletName, string account)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/" + account);
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);

    }

    private void generateAddress()
    {
        if (this.ShowTab_UnUsedAddress)
        {
            var ac = new WalletAccountReference { WalletName = this.walletname, AccountName = this.accountname };
            var newaddresses = this.WalletManager.GetUnusedAddresses(ac, 1, false, true);
            this.StateHasChanged();
        }
    }
}