@page "/coldstaking"

@using Blockcore.Features.ColdStaking
@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Base.Deployments
@using NBitcoin;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NodeDeployments NodeDeployments

@if (!NodeDeployments.GetFlags().ScriptFlags.HasFlag(ScriptVerify.CheckColdStakeVerify))
{
    <h2>Cold staking is not activated</h2>
    return;
}

<h2>Cold staking wallets</h2>

<p>Enable cold staking on an existing wallet.</p>

    <hr />
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text" id="basic-addon1">Wallet Name:</span>
        </div>
        <input @bind="WalletName" type="text" class="form-control" placeholder="wallet name" />
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span style="min-width: 10em" class="input-group-text">Password:</span>
        </div>
        <input @bind="Password" type="password" class="form-control" placeholder="password" />
    </div>

    <div class="input-group mb-3">
        <button class="btn btn-info" @onclick="CreateColdStakeAccount">Create account</button>
    </div>
    <hr />

<p>Information about the deployed wallets.</p>

@{
    <table class="table">
        <thead>
            <tr>
                <th>Wallet / Account</th>
                <th>Confirmed balance</th>
                <th>Unconfirmed balance</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @{
                foreach (var walletName in this.WalletManager.GetWalletsNames())
                {
                    var coldStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), true);
                    if (coldStakingAccount != null)
                    {
                        var coldAccountBalance = ColdStakingManager.GetBalances(walletName, coldStakingAccount.Name).Single();

                        <tr title="Withdraw">
                            <td> @walletName <strong>/</strong> @coldStakingAccount.Name</td>
                            <td>@coldAccountBalance.AmountConfirmed</td>
                            <td>@coldAccountBalance.AmountUnconfirmed</td>
                            <td>
                                @if (coldAccountBalance.AmountConfirmed + coldAccountBalance.AmountUnconfirmed > 0)
                                {
                                    <button class="btn btn-link btn-sm" @onclick="() => { NavigateToWithdraw(walletName); }">Withdraw</button>
                                }
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>@walletName</td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                        </tr>
                    }

                    var hotStakingAccount = ColdStakingManager.GetColdStakingAccount(this.WalletManager.GetWallet(walletName), false);
                    if (hotStakingAccount != null)
                    {
                        var hotAccountBalance = ColdStakingManager.GetBalances(walletName, hotStakingAccount.Name).Single();

                        <tr>
                            <td> @walletName <strong>/</strong> @hotStakingAccount.Name</td>
                            <td>@hotAccountBalance.AmountConfirmed</td>
                            <td>@hotAccountBalance.AmountUnconfirmed</td>
                            <td>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>@walletName</td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                        </tr>
                    }

                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                    {
                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();

                        <tr>
                            <td> @walletName <strong>/</strong> @account.Name</td>
                            <td>@accountBalance.AmountConfirmed</td>
                            <td>@accountBalance.AmountUnconfirmed</td>
                            <td>
                                @if (accountBalance.AmountConfirmed + accountBalance.AmountUnconfirmed > 0)
                                {
                                    <button class="btn btn-link btn-sm" @onclick="() => { NavigateToSetup(walletName); }">Delegate</button>
                                }
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
}

@code
{
    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    private string WalletName { get; set; }

    private string Password { get; set; }

    public bool IsColdWalletAccount { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        return Task.CompletedTask;
    }

    private void CreateColdStakeAccount()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.WalletName)) { this.Alert = "Please enter a wallet name"; return; }
        this.Alert = string.Empty;

        this.ColdStakingManager.GetOrCreateColdStakingAccount(this.WalletName, true, this.Password);
        this.ColdStakingManager.GetOrCreateColdStakingAccount(this.WalletName, false, this.Password);
    }

    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }

    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
}