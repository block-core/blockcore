@page "/walletview/{walletname}/{accountname}"
@implements IDisposable

@using Blockcore.Base.Deployments
@using Blockcore.Consensus.ScriptInfo
@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Features.Wallet.Types
@using NBitcoin;
@using Blockcore.Features.Wallet.Api.Controllers
@using Blockcore.Features.Wallet.Api.Models
@using Blockcore.Features.Wallet.Events
@using Blockcore.Networks
@using Blockcore.Signals
@using Blockcore.UI.BlazorModal
@using Blockcore.EventBus

@inject NavigationManager NavigationManager
@inject IWalletManager WalletManager
@inject Network Network
@inject ModalService ModalService
@inject ISignals Signals
@inject NodeDeployments NodeDeployments

@{
    var accountBalance = this.WalletManager.GetBalances(walletname, accountname).Single();
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
        <h1 class="h2"><strong>@walletname : @accountname </strong></h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToWallet(walletname); }">
                <span class="oi oi-grid-three-up" aria-hidden="true"></span> @walletname
            </button>
            <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToReceiveWallet(walletname, accountname); }">
                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Receive
            </button>
            <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToSendWallet(walletname, accountname); }">
                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Send
            </button>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-xl-12 col-sm-12 ">
            <div class="card">
                <div class="card-body">
                    <h5>@accountname Balance</h5>
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex align-items-center align-self-start">
                                <h3 class="text-left">@accountBalance.AmountConfirmed </h3>
                                <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                            </div>
                        </div>
                    </div>
                    <h6 class="text-left text-muted font-weight-normal">@accountBalance.AmountUnconfirmed (unconfirmed)</h6>
                </div>
            </div>
        </div>
    </div>
     <div class="row mb-3">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="mx-3 mt-3">
                    <h4 class="card-title">Account Address</h4>
                    <div class="table-responsive small">
                        <table class="table table-border-bottom table-striped table-sm table-hover">
                            <thead class="thead">
                                <tr>
                                    <th class="text-primary"><strong>Address</strong></th>
                                    <th class="text-primary text-center"><strong>isUsed</strong></th>
                                    <th class="text-primary text-center"><strong>isChange</strong></th>
                                    <th class="text-primary text-center"><strong>confirmed amount</strong></th>
                                    <th class="text-primary text-center"><strong>unconfirmed amount</strong></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var _address in   @accountmodel.Addresses)
                                {
                                     
                                        <tr>
                                            @* @onclick="ViewTransaction" > *@
                                            <td>@_address.Address </td>
                                            <td class="text-center">@_address.IsUsed.ToString()</td>
                                            <td class="text-center">@_address.IsChange.ToString()</td>
                                            <td class="text-center">@_address.AmountConfirmed</td>
                                            <td class="text-center">@_address.AmountUnconfirmed</td>
                                        </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    // For now just show last 100 trx of history.
    var model = WalletModelBuilder.GetHistorySlim(this.WalletManager, Network, new WalletHistoryRequest { WalletName = walletname, AccountName = accountname, Take = 100 });
    <div class="row mb-3">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="mx-3 mt-3">
                    <h4 class="card-title">History</h4>
                    <div class="table-responsive small">
                        <table class="table table-border-bottom table-striped table-sm table-hover">
                            <thead class="thead">
                                <tr>
                                    <th class="text-primary"><strong>TYPE</strong></th>
                                    <th class="text-primary text-center"><strong>DATE/TIME</strong></th>
                                    <th class="text-primary text-right"><strong>AMOUNT</strong></th>
                                    <th class="text-primary text-right"><strong>BLOCK</strong></th>
                                    <th class="text-primary text-center"><strong>DETAILS</strong></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var history in model.AccountsHistoryModel)
                                {
                                    foreach (var transaction in history.TransactionsHistory)
                                    {
                                        <tr>
                                            @* @onclick="ViewTransaction" > *@
                                            <td>@transaction.Type</td>
                                            <td class="text-center">@String.Format("{0:f}", transaction.Timestamp)</td>
                                            <td class="text-right">@transaction.Amount</td>
                                            <td class="text-right">@transaction.ConfirmedInBlock</td>
                                            <td class="text-center align-middle">
                                                <button class="btn btn-sm btn-secondary" @onclick="ViewTransaction"> <span class="oi oi-list" aria-hidden="true"></span></button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }
    private void NavigateToWallet(string walletName)
    {
        NavigationManager.NavigateTo("Accounts/" + walletName);
    }
    private void NavigateToReceiveWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletreceive/" + walletName + "/" + accountname);
    }
    private void NavigateToSendWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletsend/" + walletName + "/" + accountname);
    }


    private void ViewTransaction()
    {
        ModalService.Show("Transaction Details", typeof(Modal.ModalViewTransaction));
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        
    }

    List<SubscriptionToken> subscriptionTokens;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && this.Signals != null)
        {
            this.subscriptionTokens = new List<SubscriptionToken>()
        {
                this.Signals.Subscribe<TransactionFound>(this.ReloadEvent),
                this.Signals.Subscribe<TransactionSpent>(this.ReloadEvent),
            };
        }
    }

    DateTime lastRefresh = DateTime.UtcNow;

    private void ReloadEvent(object _)
    {
        if ((DateTime.UtcNow - lastRefresh).Seconds > 1)
        {
            lastRefresh = DateTime.UtcNow;

            InvokeAsync(this.StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (subscriptionTokens != null)
        {
            foreach (var subscriptionToken in subscriptionTokens)
            {
                subscriptionToken.Dispose();
            }
        }
    }
}