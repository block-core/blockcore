@page "/walletcrate"

@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Features.Wallet.Controllers;
@using NBitcoin;

@inject NavigationManager NavigationManager
@inject IWalletManager WalletManager
@inject Blockcore.Utilities.IDateTimeProvider DateTimeProvider
@inject IWalletSyncManager WalletSyncManager

<button class="btn btn-link" @onclick="() => { NavigateToWallets(); }">
    Back to wallets
</button>
<br />

<h3>Create a Wallet</h3>

@{
    <div class="input-group">
        <div class="input-group-prepend">
            <span class="input-group-text">Mnemonic</span>
        </div>
        <textarea @bind="Mnemonic" class="form-control" rows="5">@Mnemonic</textarea>
    </div>
    <p><strong>Important:</strong> The Mnemonic is your wallet and must be kept safe and secure.</p>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Passphrase (optional):</span>
        </div>
        <input @bind="Passphrase" type="password" class="form-control" placeholder="passphrase" />
    </div>
    <p><strong>Important:</strong> The Passphrase is permanently linked to the wallet and must be kept safe and secure.</p>

    <div class="input-group mb-3">
        <button class="btn btn-primary" @onclick="GenerateMnemonic">Generate mnemonic</button>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon1">Wallet name:</span>
        </div>
        <input @bind="WalletName" type="text" class="form-control" placeholder="wallet name" />
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Wallet Password:</span>
        </div>
        <input @bind="Password" type="password" class="form-control" placeholder="password" />
    </div>

    <button class="btn btn-primary" @onclick="CreateWallet">Create wallet</button>
    <button class="btn btn-primary" @onclick="RecoverWallet">Recover wallet</button>

    <br />
    <div class="input-group mb-3">
        <div class="alert-warning">@Alert</div>
    </div>
}

@code {

    public string WalletName { get; set; }
    public string AccountName { get; set; }
    public string Mnemonic { get; set; }
    private string Password { get; set; }
    private string Passphrase { get; set; }

    string Alert { get; set; }

    private void GenerateMnemonic()
    {
        var mnemonic = WalletModelBuilder.GenerateMnemonic(wordCount: 24);
        this.Mnemonic = mnemonic.ToString();
    }

    private void NavigateToReceiveWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletreceive/" + walletName + "/" + accountname);
    }

    private void NavigateToSendWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletsend/" + walletName + "/" + accountname);
    }

    private void NavigateToWallets()
    {
        NavigationManager.NavigateTo("wallets");
    }

    private void RecoverWallet()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "No Password"; return; }
        if (string.IsNullOrEmpty(this.Mnemonic)) { this.Alert = "No Mnemonic"; return; }
        if (string.IsNullOrEmpty(this.WalletName)) { this.Alert = "No WalletName"; return; }

        if (this.Passphrase == null)
            this.Passphrase = string.Empty;

        this.Alert = string.Empty;

        var wallet = this.WalletManager.RecoverWallet(this.Password, this.WalletName, this.Mnemonic, this.DateTimeProvider.GetUtcNow(), passphrase: this.Passphrase);

        NavigationManager.NavigateTo("walletaccount/" + WalletName + "/account 0");
    }

    private void CreateWallet()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "No Password"; return; }
        if (string.IsNullOrEmpty(this.Mnemonic)) { this.Alert = "No Mnemonic"; return; }
        if (string.IsNullOrEmpty(this.WalletName)) { this.Alert = "No WalletName"; return; }

        if (this.Passphrase == null)
            this.Passphrase = string.Empty;

        this.Alert = string.Empty;

        var requestMnemonic = new Mnemonic(this.Mnemonic);

        Mnemonic mnemonic = this.WalletManager.CreateWallet(this.Password, this.WalletName, this.Passphrase, mnemonic: requestMnemonic);

        // start syncing the wallet from the creation date
        this.WalletSyncManager.SyncFromDate(this.DateTimeProvider.GetUtcNow());

        NavigationManager.NavigateTo("walletaccount/" + WalletName + "/account 0");
    }
}