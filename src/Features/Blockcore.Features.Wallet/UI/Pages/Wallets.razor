@page "/wallets"

@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Interfaces
@using NBitcoin;

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NBitcoin.ChainIndexer ChainIndexer
@inject IWalletSyncManager WalletSyncManager
@inject IBroadcasterManager BroadcasterManager
@inject Network Network
@inject IPooledTransaction PooledTransaction

@{
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Wallets</strong></h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToWalletCreate(); }">
            <span class="oi oi-file" aria-hidden="true"></span> Create Wallet</button>
        <button class="btn btn-sm btn-primary mr-1" @onclick="() => { NavigateToWalletRecover(); }">
            <span class="oi oi-document" aria-hidden="true"></span> Recover Wallet</button>
        <button class="btn btn-sm btn-primary mr-1" @onclick="() => { Rebroadcast(); }">
            <span class="oi oi-globe" aria-hidden="true"></span> Re-broadcast</button>
        <button class="btn btn-sm btn-danger" @onclick="() => { Resync(); }">
            <span class="oi oi-flash" aria-hidden="true"></span> Resync wallets</button>
    </div>
</div>
<div class="row mb-3">
    <div class="col-xl-12 col-sm-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h5>Main Balance</h5>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex align-items-center align-self-start">
                            <h3 class="text-left">@totalBalance() </h3>
                            <p class="text-success ml-2 mb-0 font-weight-medium">@this.Network.CoinTicker.ToUpper()</p>
                        </div>
                    </div>
                </div>
                <h6 class="text-left text-muted font-weight-normal">@totalUnconfirmedBalance() (unconfirmed)</h6>
            </div>
        </div>
    </div>
</div>

<div class="row ">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Balances</h4>

                <div class="table-responsive small">
                    <table class="table table-border-bottom table-striped table-sm table-hover">
                        <thead class="thead">
                            <tr>
                                <th class="text-primary"><strong>WALLET</strong></th>
                                <th class="text-primary"><strong>CONFIRMED BALANCE</strong></th>
                                <th class="text-primary"><strong>UNCONFIRMED BALANCE</strong></th>
                                <th class="text-primary text-center"><strong>DETAILS</strong></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var walletName in this.WalletManager.GetWalletsNames())
                                {
                                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                                    {
                                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();
                                        <tr @onclick="() => { NavigateToWallet(walletName, account.Name); }">
                                            <td class="align-middle">@walletName</td>
                                            <td class="align-middle">@accountBalance.AmountConfirmed</td>
                                            <td class="align-middle">@accountBalance.AmountUnconfirmed</td>
                                            <td class="text-center align-middle"><button class="btn btn-sm btn-primary">
                                                                        <span class="oi oi-zoom-in" aria-hidden="true"></span>
                                                                    </button></td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <p>Wallet Tip: <strong> @this.WalletSyncManager.WalletTip.Height / @ChainIndexer.Height</strong></p>
            </div>
        </div>
    </div>
</div>
}
@code
{
    private void NavigateToWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletaccount/" + walletName + "/" + accountname);
    }

    private void NavigateToWalletCreate()
    {
        NavigationManager.NavigateTo("walletcreate");
    }
    private void NavigateToWalletRecover()
    {
        NavigationManager.NavigateTo("walletrecover");
    }
    private void Resync()
    {
        this.WalletSyncManager.SyncFromHeight(1);
    }

    private async Task Rebroadcast()
    {
        foreach (string walletName in this.WalletManager.GetWalletsNames())
        {
            foreach (var unspentOutput in this.WalletManager.GetSpendableTransactionsInWallet(walletName, confirmations: 0))
            {
                if (unspentOutput.Confirmations == 0)
                {
                    var sent = await this.BroadcasterManager.BroadcastTransactionAsync(unspentOutput.Transaction.Id);

                    if (!sent)
                    {
                        if (!string.IsNullOrEmpty(unspentOutput.Transaction.Hex))
                        {
                            var trx = this.Network.Consensus.ConsensusFactory.CreateTransaction(unspentOutput.Transaction.Hex);
                            this.BroadcasterManager.BroadcastTransactionAsync(trx).GetAwaiter().GetResult();
                        }
                    }
                    else
                    {
                        var transaction = await this.PooledTransaction.GetTransaction(unspentOutput.Transaction.Id);
                        this.BroadcasterManager.BroadcastTransactionAsync(transaction).GetAwaiter().GetResult();
                    }
                }
            }
        }
    }
    private dynamic totalBalance()
    {
        dynamic balance = 0;
              foreach (var walletName in this.WalletManager.GetWalletsNames())
                {
                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                    {
                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();
                        balance = balance + accountBalance.AmountConfirmed;
                    }
                }
        return balance;
    }

    private dynamic totalUnconfirmedBalance()
    {
        dynamic balance = 0;
              foreach (var walletName in this.WalletManager.GetWalletsNames())
                {
                    foreach (var account in this.WalletManager.GetAccounts(walletName))
                    {
                        var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();
                        balance = balance + accountBalance.AmountUnconfirmed;
                    }
                }
        return balance;
    }

}